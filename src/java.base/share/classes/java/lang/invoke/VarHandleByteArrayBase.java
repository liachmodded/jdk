/*
 * Copyright (c) 2015, 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.lang.invoke;

import jdk.internal.access.JavaNioAccess;
import jdk.internal.access.SharedSecrets;
import jdk.internal.foreign.AbstractMemorySegmentImpl;
import jdk.internal.foreign.MemorySessionImpl;
import jdk.internal.misc.ScopedMemoryAccess;
import jdk.internal.vm.annotation.ForceInline;

import java.lang.foreign.MemorySegment;
import java.nio.ByteBuffer;

import static java.lang.invoke.MethodHandleStatics.UNSAFE;

/**
 * The base class for generated byte array and byte buffer view
 * implementations
 */
abstract sealed class VarHandleByteArrayBase extends VarHandle
    permits VarHandleByteArrayAsChars.ArrayHandle,
            VarHandleByteArrayAsChars.ByteBufferHandle,
            VarHandleByteArrayAsDoubles.ArrayHandle,
            VarHandleByteArrayAsDoubles.ByteBufferHandle,
            VarHandleByteArrayAsFloats.ArrayHandle,
            VarHandleByteArrayAsFloats.ByteBufferHandle,
            VarHandleByteArrayAsInts.ArrayHandle,
            VarHandleByteArrayAsInts.ByteBufferHandle,
            VarHandleByteArrayAsLongs.ArrayHandle,
            VarHandleByteArrayAsLongs.ByteBufferHandle,
            VarHandleByteArrayAsShorts.ArrayHandle,
            VarHandleByteArrayAsShorts.ByteBufferHandle {

    static final boolean BE = UNSAFE.isBigEndian();

    static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();

    static final ScopedMemoryAccess SCOPED_MEMORY_ACCESS = ScopedMemoryAccess.getScopedMemoryAccess();

    final boolean be;

    VarHandleByteArrayBase(VarForm form, boolean be, boolean exact) {
        super(form, exact);
        this.be = be;
    }

    @ForceInline
    static MemorySessionImpl session(ByteBuffer bb) {
        MemorySegment segment = NIO_ACCESS.bufferSegment(bb);
        return segment != null ?
                ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;
    }

    static IllegalStateException newIllegalStateExceptionForMisalignedAccess(int index) {
        return new IllegalStateException("Misaligned access at index: " + index);
    }
}
